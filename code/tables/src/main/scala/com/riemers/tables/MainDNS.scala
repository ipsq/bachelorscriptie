package com.riemers.tables

object MainDNS {

  val header: String =
    """\begin{table}[H]
      |\centering
      |\sisetup{
      |round-mode=places,
      |round-precision=3,
      |table-number-alignment=left,
      |table-figures-integer=1,
      |table-figures-decimal=3
      |}
      |\caption{}
      |\label{tab:}
      |\begin{tabular}{llSSSSS}
      |\toprule
      |\multicolumn{2}{c}{Models} & \multicolumn{5}{c}{DM-test ($p$)} \\ \midrule
      |\multicolumn{2}{r}{Maturity} & \multicolumn{1}{l}{1 year} & \multicolumn{1}{l}{2 years} & \multicolumn{1}{l}{3 years}& \multicolumn{1}{l}{5 years} & \multicolumn{1}{l}{10 years} \\ \midrule""".stripMargin

  val footer: String =
    """\end{tabular}
      |\end{table}""".stripMargin

  val models: Vector[(String, String)] = Vector(
    ("DNS(1)", "DNS(4)"),
    ("DNS(2)", "DNS(5)"),
    ("DNS(3)", "DNS(6)"),
    ("DNS(1)+FB1(PCA)", "DNS(4)+FB1(PCA)"),
    ("DNS(2)+FB1(PCA)", "DNS(5)+FB1(PCA)"),
    ("DNS(3)+FB1(PCA)", "DNS(6)+FB1(PCA)"),
    ("DNS(1)+FB2(PCA)", "DNS(4)+FB2(PCA)"),
    ("DNS(2)+FB2(PCA)", "DNS(5)+FB2(PCA)"),
    ("DNS(3)+FB2(PCA)", "DNS(6)+FB2(PCA)"),
    ("DNS(1)+FB1(SPCA)", "DNS(4)+FB1(SPCA)"),
    ("DNS(2)+FB1(SPCA)", "DNS(5)+FB1(SPCA)"),
    ("DNS(3)+FB1(SPCA)", "DNS(6)+FB1(SPCA)"),
    ("DNS(1)+FB2(SPCA)", "DNS(4)+FB2(SPCA)"),
    ("DNS(2)+FB2(SPCA)", "DNS(5)+FB2(SPCA)"),
    ("DNS(3)+FB2(SPCA)", "DNS(6)+FB2(SPCA)"),
    ("DNS(1)+MAC", "DNS(4)+MAC"),
    ("DNS(2)+MAC", "DNS(5)+MAC"),
    ("DNS(3)+MAC", "DNS(6)+MAC"),
  )

  val data: String =
    """0.997751134319471	0.0514196240579000	0.149852641941828	0.422722213184272	0.000967298666290623
      |0.993839422174971	0.120568531553562	0.293253625973931	0.497418341952809	0.00109529323547521
      |0.969534850611958	0.00762076491387113	0.0893053168964424	0.588591249129290	0.00265939536054566
      |0.810284272856732	0.215724272171668	0.0568590529180161	0.00348295687914667	0.00128575687549031
      |0.802007805725448	0.214371874600539	0.0574836607982907	0.00421049816232818	0.00179447387136706
      |0.768882233676722	0.202331570359714	0.0488031358048096	0.00203298219953726	0.000368575030194938
      |0.965119249614921	0.164455238354939	0.0352098764713022	0.0637880995920952	0.000113075099953668
      |0.955344536945294	0.152789468789773	0.0398241831403006	0.0802811416516897	0.000122542437906130
      |0.952214986792593	0.103524598223755	0.0254453493729519	0.0939724648705627	0.000505398582210480
      |0.967217002258955	0.161236454490512	0.0727017387304057	0.0122617081285038	0.00165112352785265
      |0.953898002710542	0.200209642061330	0.0959603415696287	0.0153790752016039	0.00234984495238331
      |0.923723536648982	0.108762352713568	0.0537442179516810	0.00753155622136317	0.000417364525405193
      |0.990226525740589	0.272487764373522	0.0663556960765950	0.0646530354820985	0.000184695126438572
      |0.985884903213546	0.256941745418265	0.0701634526623902	0.0733892952709236	0.000199217102358030
      |0.983931053055715	0.171280283033924	0.0455713353592461	0.0889652683564600	0.000481775954164556
      |0.994555284899066	0.988627581545951	0.915884466347031	0.379616719780626	0.0510284557297073
      |0.993594161021335	0.980213800672307	0.870201086186848	0.311533912746311	0.0494317073063078
      |0.996775341607394	0.988942578684531	0.915935857106312	0.373925723506263	0.0455949850212053""".stripMargin

  def main(args: Array[String]): Unit = {
    val sb = new StringBuilder
    sb.append(header)
    sb.append("\n")
    sb.append(models.zip(data.split("\n")).map {
      case ((a, b), str1) =>
        a + " & " + b + " & " + str1.split("\t").map(_.trim).mkString(" & ")
    }.mkString(" \\\\ \n"))
    sb.append(" \\\\ \\bottomrule \n")
    sb.append(footer)
    println(sb.toString())
  }

}
