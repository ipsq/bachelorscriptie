package com.riemers.tables

object Main {

  val header: String =
    """\begin{table}[h]
      |\centering
      |\sisetup{
      |round-mode=places,
      |round-precision=3,
      |table-number-alignment=left,
      |table-figures-integer=1,
      |table-figures-decimal=3
      |}
      |\caption{}
      |\label{tab:}
      |\begin{adjustbox}{totalheight=\textheight-2\baselineskip}
      |\begin{tabular}{lSSSSS}
      |\toprule
      |Model & \multicolumn{5}{c}{rMSPE} \\ \midrule
      |Maturity & \multicolumn{1}{l}{1 year} & \multicolumn{1}{l}{2 years} & \multicolumn{1}{l}{3 years}& \multicolumn{1}{l}{5 years} & \multicolumn{1}{l}{10 years} \\ \midrule""".stripMargin

  val footer: String =
    """\end{tabular}
      |\end{adjustbox}
      |\end{table}""".stripMargin

  val models = Vector(
    "AR(1)",
    "VAR(1)",
    "VAR(1)+FB1(PCA)",
    "VAR(1)+FB2(PCA)",
    "VAR(1)+FB1(SPCA)",
    "VAR(1)+FB2(SPCA)",
    "AR(SIC)",
    "VAR(SIC)",
    "VAR(SIC)+FB1(PCA)",
    "VAR(SIC)+FB2(PCA)",
    "VAR(SIC)+FB1(SPCA)",
    "VAR(SIC)+FB2(SPCA)",
    "DNS(1)",
    "DNS(2)",
    "DNS(3)",
    "DNS(4)",
    "DNS(5)",
    "DNS(6)",
    "DNS(1)+FB1(PCA)",
    "DNS(2)+FB1(PCA)",
    "DNS(3)+FB1(PCA)",
    "DNS(4)+FB1(PCA)",
    "DNS(5)+FB1(PCA)",
    "DNS(6)+FB1(PCA)",
    "DNS(1)+FB2(PCA)",
    "DNS(2)+FB2(PCA)",
    "DNS(3)+FB2(PCA)",
    "DNS(4)+FB2(PCA)",
    "DNS(5)+FB2(PCA)",
    "DNS(6)+FB2(PCA)",
    "DNS(1)+FB1(SPCA)",
    "DNS(2)+FB1(SPCA)",
    "DNS(3)+FB1(SPCA)",
    "DNS(4)+FB1(SPCA)",
    "DNS(5)+FB1(SPCA)",
    "DNS(6)+FB1(SPCA)",
    "DNS(1)+FB2(SPCA)",
    "DNS(2)+FB2(SPCA)",
    "DNS(3)+FB2(SPCA)",
    "DNS(4)+FB2(SPCA)",
    "DNS(5)+FB2(SPCA)",
    "DNS(6)+FB2(SPCA)",
    "DNS(1)+MAC",
    "DNS(2)+MAC",
    "DNS(3)+MAC",
    "DNS(4)+MAC",
    "DNS(5)+MAC",
    "DNS(6)+MAC",
    "DIF(1)",
    "DIF(2)",
    "DIF(3)",
    "DIF(4)",
    "DIF(5)",
    "DIF(6)",
    "DIF(7)",
    "DIF(8)",
    "DIF(9)",
    "DIF(1)+FB1(PCA)",
    "DIF(2)+FB1(PCA)",
    "DIF(3)+FB1(PCA)",
    "DIF(1)+FB2(PCA)",
    "DIF(2)+FB2(PCA)",
    "DIF(3)+FB2(PCA)",
    "DIF(1)+FB1(SPCA)",
    "DIF(2)+FB1(SPCA)",
    "DIF(3)+FB1(SPCA)",
    "DIF(1)+FB2(SPCA)",
    "DIF(2)+FB2(SPCA)",
    "DIF(3)+FB2(SPCA)"
  )

  val data: String =
    """1	1	1	1	1
      |1.10136865643430	1.09669293489212	1.09056804874105	1.09400886015250	1.15554057480371
      |1.14343291589858	1.11986618195812	1.09823346885029	1.08511191321500	1.11606374134444
      |1.09486420436088	1.09623124007989	1.08997528352869	1.08403882289752	1.10828523684599
      |1.13653513235480	1.11761402508282	1.09891940606784	1.09061517152418	1.13038720764011
      |1.04839050013386	1.06841039554031	1.07290821522509	1.08068794929341	1.12147267452379
      |0.903742764979090	0.944249500334415	0.982524279317227	1.00649017565441	1
      |1.10136865643430	1.09669293489212	1.09056804874105	1.09400886015250	1.15554057480371
      |1.14343291589858	1.11986618195812	1.09823346885029	1.08511191321500	1.11606374134444
      |1.09486420436088	1.09623124007989	1.08997528352869	1.08403882289752	1.10828523684599
      |1.13653513235480	1.11761402508282	1.09891940606784	1.09061517152418	1.13038720764011
      |1.04839050013386	1.06841039554031	1.07290821522509	1.08068794929341	1.12147267452379
      |1.01488676236206	1.08160665634781	1.03887248511466	1.00789497254266	1.05970275168874
      |1.01881145902207	1.07100738090454	1.02911295175137	1.01302552823596	1.05613020647707
      |1.02522399975046	1.10865952788662	1.04448432174291	1.01230309902816	1.02283115085896
      |1.08819703550761	1.15184646371815	1.09331823633974	1.06015509895395	1.11592977050110
      |1.09400092018191	1.13664401432311	1.08218590708011	1.06887203875485	1.11165300591837
      |1.09602724437345	1.18370893756063	1.09771132177879	1.05599424488036	1.08323058143402
      |1.13646572903591	1.23117603233056	1.13116743528292	1.02201663261780	1.12850886300422
      |1.14348873377414	1.20659951719826	1.10689837999609	1.01814439530521	1.12264823052342
      |1.17030344069458	1.27821848354384	1.14595507626446	1.01740477367405	1.06098268135228
      |1.12523010990346	1.23423641019566	1.15130810481521	1.05774167010930	1.19964930455852
      |1.13493390266627	1.21599860476070	1.13187586049214	1.05458807848199	1.19068338399769
      |1.14704795723184	1.27234172110575	1.15954143864295	1.04717415315773	1.11829007804159
      |1.15013906683686	1.16482375574494	1.11869021273448	1.06993316412824	1.14039572478518
      |1.14551228246991	1.15260836646230	1.10704462618366	1.07199042566872	1.13559890591879
      |1.14672737503018	1.19206234048578	1.12932626478934	1.07734411448971	1.08434965731865
      |1.12470200579176	1.14494373348222	1.12140150419646	1.09556458328617	1.18718959103498
      |1.12154654129994	1.13624380159917	1.11417475178872	1.10172942588957	1.18084521447209
      |1.10010431228609	1.15375846788825	1.11979894918518	1.09763552403041	1.12550063533927
      |1.11233540051144	1.21867334232238	1.12582068575866	1.01544890794474	1.15557826063373
      |1.11997151508429	1.19461567051474	1.10084991652805	1.00875375004436	1.14687129673167
      |1.15052853698746	1.26879839803283	1.14287985482220	1.00999161136243	1.07371993061440
      |1.12358200285910	1.23990096776973	1.15533260647569	1.05537626436623	1.21559293793839
      |1.13329528448101	1.22055492285761	1.13450080984266	1.05055044576173	1.20509619924188
      |1.14836787404676	1.27803633607096	1.16352612186110	1.04407049064812	1.12645980624842
      |1.08028554214763	1.12814058867966	1.09033363779254	1.04683150879801	1.14507949503798
      |1.07784964421207	1.11612940052212	1.07821142808219	1.04789164969249	1.13960682449767
      |1.08122216662130	1.15775429466731	1.10153298711824	1.05214695580716	1.08222891710115
      |1.06916362283796	1.12533828228853	1.10320778049823	1.07494507401875	1.19456852051234
      |1.06692558913839	1.11412534450166	1.09312122423825	1.07866650092552	1.18730286534077
      |1.05307608167265	1.13791631937060	1.10294343852616	1.07511866971917	1.12525654050397
      |1.15795535951551	1.37388778189214	1.24489057898001	1.07154621145319	1.24551334584575
      |1.17051088516681	1.33996659002946	1.20850418454565	1.05540553154912	1.23439742735627
      |1.22216824818922	1.43302908990753	1.26362654382864	1.05931932279324	1.13988132921345
      |1.06248789371802	1.24341850036132	1.14822167813553	1.02471889830512	1.23338152448683
      |1.08889034040662	1.22776908223700	1.12883917463970	1.02078549630287	1.22527062109522
      |1.11800221069763	1.29745190804070	1.16409563979363	1.01176397223892	1.12708503631957
      |1.11938366767023	1.12413208359207	1.12309696565435	1.12620596991714	1.18067456685370
      |1.10523657691683	1.12012106009403	1.12179741627000	1.12477179429458	1.17159896368117
      |1.10488983433356	1.11332083099263	1.11281554397260	1.11616091372408	1.17001076780854
      |1.14343291589858	1.11986618195812	1.09823346885029	1.08511191321500	1.11606374134444
      |1.09486420436088	1.09623124007989	1.08997528352869	1.08403882289752	1.10828523684599
      |1.08310843849768	1.10939687956962	1.12722015499056	1.15244916623301	1.20959195833697
      |1.13653513235480	1.11761402508282	1.09891940606784	1.09061517152418	1.13038720764011
      |1.04839050013386	1.06841039554031	1.07290821522509	1.08068794929341	1.12147267452379
      |1.06075305417327	1.10187425631072	1.12812707791969	1.16982439999818	1.24872835385325
      |1.18611561984389	1.16705862051159	1.14488058737642	1.11364444719956	1.10457899735024
      |1.17391377392956	1.16548768359055	1.14677304423665	1.11612743678148	1.10060264061970
      |1.16470625791366	1.15542570877263	1.14019499321926	1.11756488117068	1.11052740189287
      |1.16021990090787	1.15706642200085	1.14693233505488	1.12255176609182	1.10922685929182
      |1.16627629756573	1.16536027962305	1.15536180712877	1.12875251972015	1.10690701277843
      |1.17949258613862	1.17418367258214	1.16435365489988	1.14254517561435	1.12772361440315
      |1.17029086391277	1.15641381294137	1.13734709040764	1.11078162015462	1.10992063104038
      |1.15793622207921	1.15448756254042	1.13865891305927	1.11233258425012	1.10417315313782
      |1.14932189126739	1.14547932337048	1.13319149195936	1.11410195205325	1.11265906264475
      |1.10763060126278	1.12104129150713	1.12044215573652	1.10750002930168	1.10771863001180
      |1.11342074354330	1.12858663328693	1.12829487406836	1.11299206493377	1.10376595017935
      |1.12948623738655	1.13929294178151	1.13870755143037	1.12689676243759	1.12225425172475""".stripMargin

  def main(args: Array[String]): Unit = {
    val sb = new StringBuilder
    sb.append(header)
    sb.append("\n")
    sb.append(models.zip(data.split("\n").map { s =>
      s.split("\t").map(_.trim)
    }).map {
      case (str, strings) => str + " & " + strings.mkString(" & ")
    }.mkString(" \\\\ \n"))
    sb.append(" \\\\ \\bottomrule \n")
    sb.append(footer)
    println(sb.toString())
  }

}
