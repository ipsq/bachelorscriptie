package com.riemers.tables

object MainPCA {

  val header: String =
    """\begin{table}[H]
      |\centering
      |\sisetup{
      |round-mode=places,
      |round-precision=3,
      |table-number-alignment=left,
      |table-figures-integer=1,
      |table-figures-decimal=3
      |}
      |\caption{}
      |\label{tab:}
      |\begin{tabular}{llSSSSS}
      |\toprule
      |\multicolumn{2}{c}{Models} & \multicolumn{5}{c}{DM-test ($p$)} \\ \midrule
      |\multicolumn{2}{r}{Maturity} & \multicolumn{1}{l}{1 year} & \multicolumn{1}{l}{2 years} & \multicolumn{1}{l}{3 years}& \multicolumn{1}{l}{5 years} & \multicolumn{1}{l}{10 years} \\ \midrule""".stripMargin

  val footer: String =
    """\end{tabular}
      |\end{table}""".stripMargin

  val models: Vector[(String, String)] = Vector(
    ("VAR(1)+FB1(PCA)", "VAR(1)+FB1(SPCA)"),
    ("VAR(1)+FB2(PCA)", "VAR(1)+FB2(SPCA)"),
    ("VAR(SIC)+FB1(PCA)", "VAR(SIC)+FB1(SPCA)"),
    ("VAR(SIC)+FB2(PCA)", "VAR(SIC)+FB2(SPCA)"),
    ("DNS(1)+FB1(PCA)", "DNS(1)+FB1(SPCA)"),
    ("DNS(2)+FB1(PCA)", "DNS(2)+FB1(SPCA)"),
    ("DNS(3)+FB1(PCA)", "DNS(3)+FB1(SPCA)"),
    ("DNS(4)+FB1(PCA)", "DNS(4)+FB1(SPCA)"),
    ("DNS(5)+FB1(PCA)", "DNS(5)+FB1(SPCA)"),
    ("DNS(6)+FB1(PCA)", "DNS(6)+FB1(SPCA)"),
    ("DNS(1)+FB2(PCA)", "DNS(1)+FB2(SPCA)"),
    ("DNS(2)+FB2(PCA)", "DNS(2)+FB2(SPCA)"),
    ("DNS(3)+FB2(PCA)", "DNS(3)+FB2(SPCA)"),
    ("DNS(4)+FB2(PCA)", "DNS(4)+FB2(SPCA)"),
    ("DNS(5)+FB2(PCA)", "DNS(5)+FB2(SPCA)"),
    ("DNS(6)+FB2(PCA)", "DNS(6)+FB2(SPCA)"),
    ("DIF(4)", "DIF(7)"),
    ("DIF(5)", "DIF(8)"),
    ("DIF(6)", "DIF(9)"),
    ("DIF(1)+FB1(PCA)", "DIF(1)+FB1(SPCA)"),
    ("DIF(2)+FB1(PCA)", "DIF(2)+FB1(SPCA)"),
    ("DIF(3)+FB1(PCA)", "DIF(3)+FB1(SPCA)"),
    ("DIF(1)+FB2(PCA)", "DIF(1)+FB2(SPCA)"),
    ("DIF(2)+FB2(PCA)", "DIF(2)+FB2(SPCA)"),
    ("DIF(3)+FB2(PCA)", "DIF(3)+FB2(SPCA)"),
  )

  val data: String =
    """0.939352884970757	0.556995777804862	0.368678323541663	0.358761536297321	0.392416637910043
      |0.998365135647698	0.983303939855062	0.929298266127302	0.724013326289897	0.480166861497005
      |0.939352884970757	0.556995777804862	0.368678323541663	0.358761536297321	0.392416637910043
      |0.998365135647698	0.983303939855062	0.929298266127302	0.724013326289897	0.480166861497005
      |0.0446947919892345	0.933469534660370	0.550033473354558	0.0304116469805430	0.626572005974050
      |0.0686007068954263	0.851624566227142	0.337341120894043	0.0177309859322561	0.634027262343485
      |0.187296391094628	0.982594371639337	0.653444329462868	0.0204315403524257	0.427233572857080
      |0.999550323042578	0.953884609407929	0.829571579482835	0.313050717022118	0.858945224410588
      |0.999241670213692	0.946695982667473	0.749226051889934	0.215449740154473	0.866043932032600
      |0.998673013545335	0.965206966752162	0.861802793409207	0.264189081245350	0.707015650443061
      |0.987977867282943	0.770964704169628	0.760047428553692	0.659719212306283	0.477719178269620
      |0.984760842674733	0.793951864083154	0.784232291112032	0.661834914005023	0.483210726154452
      |0.972475484539722	0.740392389506515	0.762263570934732	0.655563029635567	0.368897972730230
      |0.999827076767635	0.972470422826122	0.969213864426010	0.796571703434868	0.926662969080837
      |0.999720502989895	0.977412236549822	0.968947384670557	0.742485418322698	0.924906415279720
      |0.999314112098925	0.965823156641910	0.971059176284814	0.757312228599860	0.773227317779627
      |0.939352884970757	0.556995777804862	0.368678323541663	0.358761536297321	0.392416637910043
      |0.998365135647698	0.983303939855062	0.929298266127302	0.724013326289897	0.480166861497005
      |0.992719779926469	0.916981864579765	0.679171781476288	0.125830644591037	0.0366088183388911
      |0.925289003655891	0.564101171678165	0.418716750275835	0.415479626599768	0.276062275870089
      |0.905517458471450	0.476190359417367	0.309296730442298	0.267677331843623	0.128082140316236
      |0.782754018629409	0.467106547880586	0.379882682279216	0.391751503845566	0.212009752309341
      |0.999356169098620	0.994061819140210	0.958165077948838	0.703341704288071	0.310682200756852
      |0.997889852208993	0.988053126008677	0.924851676315500	0.541500560547921	0.133065729699616
      |0.995784272233530	0.978155523855529	0.862560430270821	0.413608617729503	0.0850435080003407""".stripMargin

  def main(args: Array[String]): Unit = {
    val sb = new StringBuilder
    sb.append(header)
    sb.append("\n")
    sb.append(models.zip(data.split("\n")).map {
      case ((a, b), str1) =>
        a + " & " + b + " & " + str1.split("\t").map(_.trim).mkString(" & ")
    }.mkString(" \\\\ \n"))
    sb.append(" \\\\ \\bottomrule \n")
    sb.append(footer)
    println(sb.toString())
  }

}
