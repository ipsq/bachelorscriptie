package com.riemers.tables

object Main {

  val header: String =
    """\begin{table}[H]
      |\centering
      |\sisetup{
      |round-mode=places,
      |round-precision=3,
      |table-number-alignment=left,
      |table-figures-integer=1,
      |table-figures-decimal=3,
      |table-align-text-post=false,
      |table-space-text-post=\sym{***}
      |}
      |\caption{}
      |\label{tab:}
      |\begin{adjustbox}{totalheight=\textheight-2\baselineskip}
      |\begin{tabular}{lSSSSS}
      |\toprule
      |Model & \multicolumn{5}{c}{rMSPE} \\ \midrule
      |Maturity & \multicolumn{1}{l}{1 year} & \multicolumn{1}{l}{2 years} & \multicolumn{1}{l}{3 years}& \multicolumn{1}{l}{5 years} & \multicolumn{1}{l}{10 years} \\ \midrule""".stripMargin

  val footer: String =
    """\end{tabular}
      |\end{adjustbox}
      |\end{table}""".stripMargin

  val models = Vector(
    "AR(1)",
    "VAR(1)",
    "VAR(1)+FB1(PCA)",
    "VAR(1)+FB2(PCA)",
    "VAR(1)+FB1(SPCA)",
    "VAR(1)+FB2(SPCA)",
    "AR(SIC)",
    "VAR(SIC)",
    "VAR(SIC)+FB1(PCA)",
    "VAR(SIC)+FB2(PCA)",
    "VAR(SIC)+FB1(SPCA)",
    "VAR(SIC)+FB2(SPCA)",
    "DNS(1)",
    "DNS(2)",
    "DNS(3)",
    "DNS(4)",
    "DNS(5)",
    "DNS(6)",
    "DNS(1)+FB1(PCA)",
    "DNS(2)+FB1(PCA)",
    "DNS(3)+FB1(PCA)",
    "DNS(4)+FB1(PCA)",
    "DNS(5)+FB1(PCA)",
    "DNS(6)+FB1(PCA)",
    "DNS(1)+FB2(PCA)",
    "DNS(2)+FB2(PCA)",
    "DNS(3)+FB2(PCA)",
    "DNS(4)+FB2(PCA)",
    "DNS(5)+FB2(PCA)",
    "DNS(6)+FB2(PCA)",
    "DNS(1)+FB1(SPCA)",
    "DNS(2)+FB1(SPCA)",
    "DNS(3)+FB1(SPCA)",
    "DNS(4)+FB1(SPCA)",
    "DNS(5)+FB1(SPCA)",
    "DNS(6)+FB1(SPCA)",
    "DNS(1)+FB2(SPCA)",
    "DNS(2)+FB2(SPCA)",
    "DNS(3)+FB2(SPCA)",
    "DNS(4)+FB2(SPCA)",
    "DNS(5)+FB2(SPCA)",
    "DNS(6)+FB2(SPCA)",
    "DNS(1)+MAC",
    "DNS(2)+MAC",
    "DNS(3)+MAC",
    "DNS(4)+MAC",
    "DNS(5)+MAC",
    "DNS(6)+MAC",
    "DIF(1)",
    "DIF(2)",
    "DIF(3)",
    "DIF(4)",
    "DIF(5)",
    "DIF(6)",
    "DIF(7)",
    "DIF(8)",
    "DIF(9)",
    "DIF(1)+FB1(PCA)",
    "DIF(2)+FB1(PCA)",
    "DIF(3)+FB1(PCA)",
    "DIF(1)+FB2(PCA)",
    "DIF(2)+FB2(PCA)",
    "DIF(3)+FB2(PCA)",
    "DIF(1)+FB1(SPCA)",
    "DIF(2)+FB1(SPCA)",
    "DIF(3)+FB1(SPCA)",
    "DIF(1)+FB2(SPCA)",
    "DIF(2)+FB2(SPCA)",
    "DIF(3)+FB2(SPCA)"
  )

  val data: String =
    """1	1	1	1	1
      |1.06025132605972	1.09778702648402	1.09693955172801	1.10210342604467	1.14390314569917
      |1.07945742037492	1.09087727702055	1.07575672546924	1.07144600034158	1.09126453650729
      |1.11139882655175	1.12123735022254	1.10232776956380	1.09368740093634	1.12560677782919
      |1.06882317305542	1.08981107704953	1.07850880457376	1.07468176271087	1.09393422838644
      |1.07065189849507	1.09673366781573	1.08757734364116	1.08814335436159	1.12616456528584
      |0.920281951194415	1.00138220864649	1.01096339461446	1.01533565823678	1.00639287209312
      |1.06025132605972	1.09778702648402	1.09693955172801	1.10210342604467	1.14390314569917
      |1.07945742037492	1.09087727702055	1.07575672546924	1.07144600034158	1.09126453650729
      |1.11139882655175	1.12123735022254	1.10232776956380	1.09368740093634	1.12560677782919
      |1.06882317305542	1.08981107704953	1.07850880457376	1.07468176271087	1.09393422838644
      |1.07065189849507	1.09673366781573	1.08757734364116	1.08814335436159	1.12616456528584
      |1.30800600630262	1.04483872176377	1.04204937153578	1.15438617222570	0.982351126525641
      |1.26951718534865	1.04910254207304	1.06101829365432	1.19266207958072	0.978818106266905
      |1.20692598123184	1.04931041841722	1.03572167187823	1.18846387262183	0.995505200492623
      |1.11899770102915	1.11735956022927	1.07898550554828	1.15997726325090	1.06258595514425
      |1.10330491891113	1.10147242081676	1.08058862482062	1.19285160572590	1.05652611019322
      |1.08974055467424	1.15692269863071	1.08267719765522	1.18216863509772	1.06626729465352
      |1.18557764808229	1.16657744265990	1.06310470681709	1.00829737174002	1.01574655850737
      |1.17206169457187	1.13848698543338	1.04433406597462	1.02234390100644	1.00835106198525
      |1.16655466461612	1.22242269459374	1.07685421703614	1.02011915661049	0.964706971144664
      |1.13481431273603	1.19492131866334	1.10998639080207	1.08147057326035	1.08307631376678
      |1.12211510218480	1.16805077479540	1.09321395429068	1.09679834018695	1.07468901635889
      |1.12657035710970	1.25161220859719	1.12420837584346	1.09671913937547	1.03885723665797
      |1.26374663651622	1.26369749854002	1.11535649132348	1.04441792126049	1.03985668292163
      |1.25287026829393	1.22350846171599	1.08778658580944	1.05582296335129	1.03198589013055
      |1.27134184373244	1.32270806275066	1.12885107575399	1.05823468465338	0.994749638095449
      |1.16859271483409	1.31027432940225	1.18485166480504	1.09216840476257	1.14920408355697
      |1.16260995412108	1.27119630622051	1.15355963818631	1.09966437719436	1.13970558458689
      |1.18132522880886	1.38685271789384	1.20708866859589	1.09985747283524	1.09138836796244
      |1.21463088835880	1.14696185691731	1.06156145833901	1.03219906074309	1.01166438637589
      |1.19692804477605	1.12488588756707	1.04954949029556	1.04997163019150	1.00397332168627
      |1.18028369396439	1.19498447705021	1.07212262661202	1.04618433680583	0.966929091052941
      |1.11034227961653	1.18144915188606	1.10222319015123	1.08569565789358	1.07224542130784
      |1.09934875841625	1.15539554832841	1.08776954289896	1.10379502651694	1.06334315537674
      |1.10463286618661	1.23665852929078	1.11530862956510	1.10222302430794	1.03358661600122
      |1.21010149904501	1.25068545974824	1.10552901901904	1.03994573671642	1.04035942228435
      |1.20195240351589	1.20932574681903	1.07697652734960	1.05127917686034	1.03236152492106
      |1.22550884732448	1.31121589028657	1.11884312285908	1.05380805596404	0.997807671317105
      |1.09699285401219	1.27772659909673	1.15936114866182	1.08349035383178	1.13382045325279
      |1.09426868160901	1.23768102724101	1.12839031542703	1.09281116634929	1.12451297353163
      |1.11843309394314	1.35638131684711	1.18185184626475	1.09265816357861	1.08371347505428
      |1.29467287962999	1.30982504098168	1.18675247133024	1.11941859391900	1.05748123316045
      |1.28064798435585	1.27500609739049	1.16531027095035	1.13461824167401	1.04780478403446
      |1.29306066262577	1.36749184628408	1.20067021354339	1.13483977267069	1.01804733011169
      |1.06301490753451	1.17560804680681	1.12415602908517	1.13016584663865	1.10972923670290
      |1.05886357260519	1.15585019265337	1.11510204890147	1.15180861993632	1.09976595017460
      |1.05125778719008	1.23067900818669	1.13773580488541	1.14610443731345	1.07151694329456
      |1.06113633139977	1.10526850604659	1.10169305692675	1.10458162731501	1.15955798612578
      |1.09556756060832	1.13825717467795	1.13596607134613	1.14158072143403	1.20420491419718
      |1.10800050161361	1.14738895564958	1.14415927827419	1.15204474661621	1.22844458000455
      |1.07945742037492	1.09087727702055	1.07575672546924	1.07144600034158	1.09126453650729
      |1.11139882655175	1.12123735022254	1.10232776956380	1.09368740093634	1.12560677782919
      |1.11313983099261	1.13206880520200	1.12455928521530	1.12379493285639	1.13731053688752
      |1.06882317305542	1.08981107704953	1.07850880457376	1.07468176271087	1.09393422838644
      |1.07065189849507	1.09673366781573	1.08757734364116	1.08814335436159	1.12616456528584
      |1.07371408022438	1.11284996270233	1.11912270899886	1.13577617436515	1.15936627936935
      |1.09582628176127	1.11184653835116	1.09419743208070	1.08629686152830	1.11926453279542
      |1.12833575089090	1.14471808501546	1.12787862037080	1.12176750879776	1.16247885787072
      |1.16076986510272	1.17539980890829	1.15732642312369	1.15585544498428	1.22484058670840
      |1.13142535697501	1.14600843912111	1.12488633612283	1.11110128835816	1.14589800161779
      |1.16574600948706	1.17938993777492	1.15905114646568	1.14687493118374	1.18880896647304
      |1.19378112908748	1.20637725301303	1.18654835135765	1.18132707561378	1.24858101541441
      |1.08638923835520	1.11068120159494	1.09583361267875	1.08812103173448	1.12475988620202
      |1.11987039117524	1.14514703477849	1.13189323580977	1.12726330032462	1.17414112510323
      |1.15519987209630	1.17604720154657	1.15998146381287	1.15839743923498	1.23274592027981
      |1.08635019807768	1.11865077597150	1.10855668337606	1.10594060475687	1.15125110856608
      |1.12272667494166	1.15375542407577	1.14515144664411	1.14584606090634	1.20194353444708
      |1.16029873371988	1.18760128713254	1.17765087748914	1.18329943239697	1.26189304395157""".stripMargin

  val dmbool: String =
    """0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |1	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0
      |0	0	0	0	0""".stripMargin

  def main(args: Array[String]): Unit = {
    val sb = new StringBuilder
    sb.append(header)
    sb.append("\n")
    sb.append(models.zip(data.split("\n").zip(dmbool.split("\n")).map {
      case (str, str1) =>
        str.split("\t").map(_.trim).zip(
          str1.split("\t").map(_.trim).map(_.toInt)
        ).map {
          case (str, i) if i > 0 =>
            str + "\\sym{" + ("*" * i) + "}"
          case (str, _) => str
        }
    }).map {
      case (str, strings) => str + " & " + strings.mkString(" & ")
    }.mkString(" \\\\ \n"))
    sb.append(" \\\\ \\bottomrule \n")
    sb.append(footer)
    println(sb.toString())
  }

}
